% This is the PEG compiler for babysitter configuration files
config_element <- ws? elem_list ws? `babysitter_list_utils:merge_proplists(Node)`;
elem_list <- head:elem tail:(ws? elem)* `
  case Node of
    [] -> [];
    [""] -> [];
    _ ->
      Head = proplists:get_value(head, Node),
      Tail = [R || [_,R] <- proplists:get_value(tail, Node)],
      [Head|Tail]
  end
`;
elem <- hook_elem / action_elem ~;
hook_elem <- action '.' (bef / aft) ':' [ \t]* string (crlf / !.) `
  {lists:nth(1, Node), 
    {lists:nth(3, Node), lists:flatten(lists:nth(6, Node))}
  }
`;
action_elem <- action ':' [ \t]* string (crlf / !.) `
  {lists:nth(1, Node), 
    {command, lists:flatten(lists:nth(4, Node))}
  }
`;

action <- "bundle" / "mount" / "start" / "stop" / "unmount" / "cleanup" `erlang:list_to_atom(lists:flatten(Node))`;
ws <- (comment / space)* `{}`;
% Atoms
bef <- "before" `pre`;
aft <- "after" `post`;
  
string <- bracketed_string / nonbracketed_string ~;
bracketed_string <- 'do' str:(!'end' (.))* 'end' `proplists:get_value(str, Node)`;
nonbracketed_string <- (!crlf .)* ~;

comment <- '#' (!crlf .)* crlf ~;
space <- [ \t\n\s\r] ~;
crlf <- "\r\n" / "\n" ~;